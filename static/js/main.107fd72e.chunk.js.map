{"version":3,"sources":["pages/Search/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SPREADSHEET_ID","process","SHEET_ID","CLIENT_EMAIL","PRIVATE_KEY","Search","useState","rows","setRowsData","message","setMessage","alertVariant","setAlertVariant","loading","setLoading","useEffect","doc","GoogleSpreadsheet","a","useServiceAccountAuth","client_email","private_key","loadInfo","sheet","sheetsById","getRows","appendSpreadsheet","Alert","variant","Card","style","position","Form","onSubmit","e","preventDefault","inputValue","target","formBasicEmail","value","unattendedDays","find","element","Email","UnattendedDays","Group","controlId","Control","disabled","type","placeholder","Button","size","block","Spinner","as","animation","role","aria-hidden","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+lBAKMA,EAAc,UAAGC,gDAAH,EAA2C,GACzDC,EAAQ,UAAGD,cAAH,EAAqC,GAC7CE,EAAY,UAAGF,wDAAH,EAAgD,GAC5DG,EAAW,UAAGH,wsDAAH,EAAuD,GA8EzDI,MA5Ef,WAAmB,IAAD,EACYC,mBAAgB,IAD5B,mBACTC,EADS,KACHC,EADG,OAEcF,mBAAiB,IAF/B,mBAETG,EAFS,KAEAC,EAFA,OAGwBJ,mBAAiB,IAHzC,mBAGTK,EAHS,KAGKC,EAHL,OAIcN,oBAAkB,GAJhC,mBAITO,EAJS,KAIAC,EAJA,KAoDhB,OA9CAC,qBAAU,WACR,IAAMC,EAAM,IAAIC,oBAAkBjB,IAEX,uCAAG,8BAAAkB,EAAA,sEAClBF,EAAIG,sBAAsB,CAC9BC,aAAcjB,EACdkB,YAAajB,IAHS,uBAKlBY,EAAIM,WALc,cAMlBC,EAAQP,EAAIQ,WAAWtB,GANL,SAOLqB,EAAME,UAPD,OAOlBlB,EAPkB,OAQxBC,EAAYD,GACZO,GAAW,GATa,4CAAH,qDAWvBY,KACC,IAgCD,gCACGjB,GAAW,cAACkB,EAAA,EAAD,CAAOC,QAASjB,EAAhB,SAA+BF,IAC3C,cAACoB,EAAA,EAAD,CAAMC,MAAO,CAAEC,SAAU,YAAzB,SACE,eAACC,EAAA,EAAD,CAAMC,SAjCS,SAACC,GAAY,IAAD,EAC/BA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,OAAOC,eAAeC,MACrCC,EAAc,OAAGjC,QAAH,IAAGA,GAAH,UAAGA,EAAMkC,MAAK,SAACC,GAAD,OAAaA,EAAQC,QAAUP,YAA7C,aAAG,EAAuDQ,eAC1EJ,EACEA,GAAkB,GACpB9B,EACE8B,EACE,ySAEJ5B,EAAgB,YACP4B,EAAiB,GAAKA,GAAkB,GACjD9B,EACE8B,EACE,6KAEJ5B,EAAgB,YACP4B,EAAiB,IAC1B9B,EACE8B,EAAiB,kHAEnB5B,EAAgB,YAGlBF,EAAW,yFACXE,EAAgB,YAQd,UACE,cAACoB,EAAA,EAAKa,MAAN,CAAYC,UAAU,iBAAtB,SACE,cAACd,EAAA,EAAKe,QAAN,CAAcC,SAAUnC,EAASoC,KAAK,SAASC,YAAY,qBAE7D,cAACC,EAAA,EAAD,CAAQH,SAAUnC,EAASoC,KAAK,SAASrB,QAAQ,UAAUwB,KAAK,KAAKC,OAAK,EAA1E,SACGxC,EACC,gCACE,cAACyC,EAAA,EAAD,CAASC,GAAG,OAAOC,UAAU,SAASC,KAAK,SAASC,cAAY,SAAU,IAD5E,sBAKA,iBCjECC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.107fd72e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport { Button, Card, Form, Alert, Spinner } from \"react-bootstrap\";\nimport \"./Search.css\";\n\nconst SPREADSHEET_ID = process.env.REACT_APP_SPREADSHEET_ID ?? \"\";\nconst SHEET_ID = process.env.REACT_APP_SHEET_ID ?? \"\";\nconst CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_CLIENT_EMAIL ?? \"\";\nconst PRIVATE_KEY = process.env.REACT_APP_GOOGLE_SERVICE_PRIVATE_KEY ?? \"\";\n\nfunction Search() {\n  const [rows, setRowsData] = useState<any[]>([]);\n  const [message, setMessage] = useState<string>(\"\");\n  const [alertVariant, setAlertVariant] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n\n    const appendSpreadsheet = async () => {\n      await doc.useServiceAccountAuth({\n        client_email: CLIENT_EMAIL,\n        private_key: PRIVATE_KEY,\n      });\n      await doc.loadInfo(); // loads document properties and worksheets\n      const sheet = doc.sheetsById[SHEET_ID];\n      const rows = await sheet.getRows();\n      setRowsData(rows);\n      setLoading(false);\n    };\n    appendSpreadsheet();\n  }, []);\n\n  const onFormSubmit = (e: any) => {\n    e.preventDefault();\n    const inputValue = e.target.formBasicEmail.value;\n    const unattendedDays = rows?.find((element) => element.Email === inputValue)?.UnattendedDays;\n    if (unattendedDays) {\n      if (unattendedDays <= 5) {\n        setMessage(\n          unattendedDays +\n            \" gün devamsızlığınız var.Katılım sertifikasını ödevi teslim etmese dahi alabilirsiniz. Ödevi teslim ederseniz ve devamsızlığınız 7 günü geçmezse, katılım + bitirme sertifikası alabilirsiniz.\",\n        );\n        setAlertVariant(\"success\");\n      } else if (unattendedDays > 5 && unattendedDays <= 7) {\n        setMessage(\n          unattendedDays +\n            \" gün devamsızlığınız var.Ödevi teslim ettiğiniz takdirde katılım sertifikası + bitirme sertifikası alabilirsiniz.\",\n        );\n        setAlertVariant(\"warning\");\n      } else if (unattendedDays > 8) {\n        setMessage(\n          unattendedDays + \" gün devamsızlığınız var.Ödevi teslim etseniz dahi belge alamazsınız.\",\n        );\n        setAlertVariant(\"danger\");\n      }\n    } else {\n      setMessage(\"E-posta adresi bulunamadı. Lütfen Discord sunucumuzdan bize ulaşın.\");\n      setAlertVariant(\"danger\");\n    }\n  };\n\n  return (\n    <div>\n      {message && <Alert variant={alertVariant}>{message}</Alert>}\n      <Card style={{ position: \"absolute\" }}>\n        <Form onSubmit={onFormSubmit}>\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Control disabled={loading} type=\"search\" placeholder=\"E-posta adresi\" />\n          </Form.Group>\n          <Button disabled={loading} type=\"submit\" variant=\"primary\" size=\"lg\" block>\n            {loading ? (\n              <div>\n                <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" />{\" \"}\n                Yükleniyor...\n              </div>\n            ) : (\n              \"Ara\"\n            )}\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./App.css\";\nimport Search from \"./pages/Search/Search\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}